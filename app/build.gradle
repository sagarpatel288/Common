//apply plugin: 'com.android.application'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-android-extensions'
//To enable the kotlin annotation processor tool apply plugin: ‘kotlin-kapt’ to the top of the app gradle file
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-parcelize"
apply plugin: "androidx.navigation.safeargs"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
//        applicationId "com.example.android.common"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dexOptions {
        // incremental is obsolete now
//        incremental true
        // https://dev.to/joshuadeguzman/speed-up-your-android-project-s-gradle-builds-1366
        // Disable preDexLibraries if using for clean CI build
        preDexLibraries true
        /*javaMaxHeapSize "12g"*/
    }

    buildFeatures {
        dataBinding = true
        // for view binding :
        viewBinding = true
    }

    buildTypes {
        debug {
            try {
                // https://developer.android.com/studio/build/optimize-your-build#disable_crunching
                // https://blog.mindorks.com/speed-up-gradle-build-for-android-to-save-your-time
                // Disables PNG crunching on DEBUG build type
                crunchPngs false // Enabled by default for RELEASE build type
                minifyEnabled false
                buildConfigField "String", "API_URL", "\"https://api.openweathermap.org/data/2.5/\""
                buildConfigField "String", "API_KEY", openweathermap_key
                debuggable true
                // Avoids compiling unnecessary resources
                resConfigs "en", "xxhdpi"
                // If you don't need to run a Crashlytics report, speed up your debug builds by disabling the plugin as follows:
                ext.enableCrashlytics = false
                // To prevent Crashlytics from automatically updating its build ID, add the following to your build.gradle file:
                ext.alwaysUpdateBuildId = false
                // https://dev.to/joshuadeguzman/speed-up-your-android-project-s-gradle-builds-1366?signin=true
                /* FirebasePerformance {
                     instrumentationEnabled false
                 }*/
            } catch (e) {
                // add gradle.properties file with the following property:
                // openweathermap_key = "YOUR_API_KEY"
                throw e
            }
        }
        release {
            minifyEnabled false
            buildConfigField "String", "API_URL", "\"https://api.openweathermap.org/data/2.5/\""
            buildConfigField "String", "API_KEY", openweathermap_key
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // https://blog.mindorks.com/speed-up-gradle-build-for-android-to-save-your-time
    // Turn off multiple APK Build for all other build types except release build type
    if (project.hasProperty('devBuild')) {
        splits.abi.enable = false
        splits.density.enable = false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies { configs ->

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    kotlinSupport(configs)
    androidLibs(configs)
    navigationLibs(configs)
    threadLibs(configs)
    lifeCycleLibs(configs)
    roomDbLibs(configs)
    diLibs(configs)
    networkingLibs(configs)
    thirdPartyLibs(configs)

    // instrumentation tests
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"

    // unit tests
    testImplementation "junit:junit:4.13.1"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2"
    testImplementation "org.koin:koin-test:2.0.1"
    testImplementation "org.mockito:mockito-core:3.1.0"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
}

//Kotlin support
void kotlinSupport(configs) {

    //Kotlin support
    configs.implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.ext.kotlin_version"
}

//Native android libs
static void androidLibs(configs) {

    //Support
    configs.implementation 'com.android.support:multidex:1.0.3'
    /*https://www.bignerdranch.com/blog/activity-and-fragment-layouts-with-androidx/*/
    configs.implementation 'androidx.appcompat:appcompat:1.2.0'
    // this is needed to use the updated AppCompatActivity
    configs.implementation "androidx.activity:activity-ktx:1.1.0"
    configs.implementation 'androidx.fragment:fragment-ktx:1.2.5'
    configs.implementation 'androidx.core:core-ktx:1.3.2'
    configs.implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    configs.implementation "com.google.android.material:material:1.2.1"
}

static void navigationLibs(configs) {
    def nav_version = "2.3.3"

    // Java language implementation
    configs.implementation "androidx.navigation:navigation-fragment:$nav_version"
    configs.implementation "androidx.navigation:navigation-ui:$nav_version"

    // Kotlin
    configs.implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    configs.implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Feature module Support
    configs.implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // Testing Navigation
    configs.androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    // Jetpack Compose Integration
    configs.implementation "androidx.navigation:navigation-compose:1.0.0-alpha07"
}

//Thread libs
static void threadLibs(configs) {

    def kotlin_coroutines = "1.3.7"

    //Coroutines
    configs.implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    configs.implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"
}

//Life cycle libs
static void lifeCycleLibs(configs) {
    /*https://developer.android.com/jetpack/androidx/releases/lifecycle#declaring_dependencies*/

    def lifecycle_version = "2.3.0"
    def arch_version = "2.1.0"

    // To prevent live data update to the UI after onPause
    configs.implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    configs.implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    //lifecycle extensions have been deprecated
    /*https://developer.android.com/jetpack/androidx/releases/lifecycle#declaring_dependencies*/
    /*configs.implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"*/

    // Saved state module for ViewModel
    configs.implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

    // Jetpack Compose Integration for ViewModel
    configs.implementation "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha01"

    // Annotation processor
    configs.kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    configs.kapt "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // For Kotlin use kapt instead of annotationProcessor

    // optional - helpers for implementing LifecycleOwner in a Service
    configs.implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    configs.implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    configs.implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    // optional - Test helpers for LiveData
    configs.testImplementation "androidx.arch.core:core-testing:$arch_version"
}

//Room db libs
static void roomDbLibs(configs) {

    def room_version = "2.2.6"

    // Room
    configs.implementation "androidx.room:room-runtime:$room_version"
    configs.kapt "androidx.room:room-compiler:$room_version"
    configs.annotationProcessor "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    // optional - Kotlin Extensions and Coroutines support for Room
    configs.implementation "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    configs.implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    configs.implementation "androidx.room:room-guava:$room_version"

    // Test helpers
    configs.testImplementation "androidx.room:room-testing:$room_version"

    //Room debug db
    configs.debugApi 'com.amitshekhar.android:debug-db:1.0.6'
}

//Dependency Injection
static void diLibs(configs) {

    def koin_version = "2.0.1"

    // Koin for Android
    configs.implementation "org.koin:koin-android:$koin_version"
    // Koin Android ViewModel features
    configs.implementation "org.koin:koin-android-viewmodel:$koin_version"
    // Koin Arch Components for Room
//    implementation "org.koin:koin-android-architecture:$koin_version"
}

//Retrofit, Networking, Parsing Libs
static void networkingLibs(configs) {

    def retrofit = "2.6.2"
    def okhttp_logging_interceptor = "4.2.2"

    //Google
    configs.implementation 'com.google.code.gson:gson:2.8.6'

    //Retrofit
    configs.implementation "com.squareup.retrofit2:retrofit:$retrofit"
    configs.implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    configs.implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_logging_interceptor"
}

//Third party libs
static void thirdPartyLibs(configs) {

    //ThirdParties, External, Extra libs
    configs.implementation 'com.mikhaellopez:circularimageview:4.2.0'
    configs.implementation 'com.alexvasilkov:gesture-views:2.6.0'
    configs.implementation 'com.jakewharton.timber:timber:4.7.1'
}


